#! /bin/sh

me=$(basename $0)
: ${TMPDIR=/tmp}
TMPFILE=$TMPDIR/$me.$$

help="\
PostgreSQL data integrity verification test harness (based on pg_regress).

Usage: $me [options...] dbname

Options:
  --inputdir=DIR            take input files from DIR (default \`.')
  --max-connections=N       maximum number of concurrent connections
                            (default is 0 meaning unlimited)
  --multibyte=ENCODING      use ENCODING as the multibyte encoding, and
                            also run a test by the same name
  --outputdir=DIR           place output files in DIR (default \`.')
  --schedule=FILE           use test ordering schedule from FILE
                            (may be used multiple times to concatenate)
  --no-locale               use C locale

Options for using an existing installation:
  --host=HOST               use postmaster running on HOST
  --port=PORT               use postmaster running at PORT
  --user=USER               connect as USER

The exit status is 0 if all tests passed, 1 if some tests failed, and 2
if the tests could not be run for some reason.

Report bugs to <pgsql-bugs@postgresql.org>."


message(){
#    _dashes='==============' # 14
#   _spaces='                                      ' # 38
#    _msg=`echo "$1$_spaces" | cut -c 1-38`
#    echo "$_dashes $_msg $_dashes"
    d="====================="
    l=$(( ${#1}/2 ))
    m=${#d}
    echo "${d:l:m} $1 ${d:l:m}"
}


# ----------
# Unset locale settings
# ----------

unset LC_COLLATE LC_CTYPE LC_MONETARY LC_MESSAGES LC_NUMERIC LC_TIME LC_ALL LANG LANGUAGE

# ----------
# Check for echo -n vs echo \c
# ----------

if echo '\c' | grep c >/dev/null 2>&1; then
    ECHO_N='echo -n'
    ECHO_C=''
else
    ECHO_N='echo'
    ECHO_C='\c'
fi


# ----------
# Initialize default settings
# ----------

: ${inputdir=.}
: ${outputdir=.}

bindir='/usr/bin'
enable_shared='yes'


unset mode
unset schedule
unset nolocale
unset top_builddir
unset temp_install
unset multibyte

maxconnections=0
temp_port=65432


# ----------
# Parse command line options
# ----------

while [ "$#" -gt 0 ]
do
    case $1 in
        --help|-\?)
                echo "$help"
                exit 0;;
        --version)
                echo "$me (PostgreSQL 8.0.8)"
                exit 0;;
        --inputdir=*)
                inputdir=`expr "x$1" : "x--inputdir=\(.*\)"`
                shift;;
        --multibyte=*)
                multibyte=`expr "x$1" : "x--multibyte=\(.*\)"`
                shift;;
        --no-locale)
                nolocale=yes
                shift;;
        --max-connections=*)
                maxconnections=`expr "x$1" : "x--max-connections=\(.*\)"`
                shift;;
        --outputdir=*)
                outputdir=`expr "x$1" : "x--outputdir=\(.*\)"`
                shift;;
        --schedule=*)
                foo=`expr "x$1" : "x--schedule=\(.*\)"`
                schedule="$schedule $foo"
                shift;;
        --temp-port=*)
                temp_port=`expr "x$1" : "x--temp-port=\(.*\)"`
                shift;;
        --host=*)
                PGHOST=`expr "x$1" : "x--host=\(.*\)"`
                export PGHOST
                unset PGHOSTADDR
                shift;;
        --port=*)
                PGPORT=`expr "x$1" : "x--port=\(.*\)"`
                export PGPORT
                shift;;
        --user=*)
                PGUSER=`expr "x$1" : "x--user=\(.*\)"`
                export PGUSER
                shift;;
        -*)
                echo "$me: invalid argument $1" 1>&2
                exit 2;;
        *)
                dbname="$1"
                shift;;
    esac
done


# ----------
# Set default file list of tests to be performed.
# ----------

: ${schedule=schedule}


# ----------
# Create input and output directories if not existent already.
# ----------

[ -e "$inputdir/expected" ] && [ -d "$inputdir/expected" ] || mkdir "$inputdir/expected"
[ -e "$outputdir/results" ] && [ -d "$outputdir/results" ] || mkdir "$outputdir/results"


# ----------
# Set up diff to ignore horizontal white space differences.
# ----------

case $host_platform in
    *-*-qnx* | *-*-sco3.2v5*)
        DIFFFLAGS=-b;;
    *)
        DIFFFLAGS=-w;;
esac

# ----------
# Set backend timezone and datestyle explicitly
#
# To pass the horology test in its current form, the postmaster must be
# started with PGDATESTYLE=ISO, while the frontend must be started with
# PGDATESTYLE=Postgres.  We set the postmaster values here and change
# to the frontend settings after the postmaster has been started.
# ----------

PGTZ='PST8PDT'; export PGTZ
#PGDATESTYLE='ISO, MDY'; export PGDATESTYLE
#PGDATESTYLE='ISO 8601'; export PGDATESTYLE

# ----------
# Exit trap to remove temp file and shut down postmaster
# ----------

exit_trap(){ 
    savestatus=$1
    if [ -n "$postmaster_pid" ]; then
        kill -2 "$postmaster_pid"
        wait "$postmaster_pid"
        unset postmaster_pid
    fi
    rm -f "$TMPFILE" && exit $savestatus
}

trap 'exit_trap $?' 0

sig_trap() {
    savestatus=$1
    echo; echo "caught signal"
    if [ -n "$postmaster_pid" ]; then
        echo "signalling fast shutdown to postmaster with pid $postmaster_pid"
        kill -2 "$postmaster_pid"
        wait "$postmaster_pid"
        unset postmaster_pid
    fi
    (exit $savestatus); exit
}

trap 'sig_trap $?' 1 2 13 15



# ----------
# Scan resultmap file to find which platform-specific expected files to use.
# The format of each line of the file is
#         testname/hostplatformpattern=substitutefile
# where the hostplatformpattern is evaluated per the rules of expr(1),
# namely, it is a standard regular expression with an implicit ^ at the start.
# What hostplatformpattern will be matched against is the config.guess output
# followed by either ':gcc' or ':cc' (independent of the actual name of the
# compiler executable).
#
# The tempfile hackery is needed because some shells will run the loop
# inside a subshell, whereupon shell variables set therein aren't seen
# outside the loop :-(
# ----------

cat /dev/null >$TMPFILE
if [ -f "$inputdir/resultmap" ]
then
    while read LINE
    do
        HOSTPAT=`expr "$LINE" : '.*/\(.*\)='`
        if [ `expr "$host_platform:$compiler" : "$HOSTPAT"` -ne 0 ]
        then
            # remove hostnamepattern from line so that there are no shell
            # wildcards in SUBSTLIST; else later 'for' could expand them!
            TESTNAME=`expr "$LINE" : '\(.*\)/'`
            SUBST=`echo "$LINE" | sed 's/^.*=//'`
            echo "$TESTNAME=$SUBST" >> $TMPFILE
        fi
    done <"$inputdir/resultmap"
fi
SUBSTLIST=`cat $TMPFILE`
rm -f $TMPFILE


LOGDIR=$outputdir/log


# ----------
# Set up SQL shell for the test.
# ----------

PSQL="$bindir/psql -a -q -X $psql_options"


# ----------
# Let's go
# ----------

message "running verification test queries"

if [ ! -d "$outputdir/results" ]; then
    mkdir -p "$outputdir/results" || { (exit 2); exit; }
fi
result_summary_file="$outputdir/$me.out"
diff_file="$outputdir/$me.diffs"

cat /dev/null >"$result_summary_file"
cat /dev/null >"$diff_file"

lno=0
(
    [ "$enable_shared" != yes ] && echo "ignore: plpgsql"
    cat $schedule </dev/null
) | sed 's/[ 	]*#.*//g' | \
while read line
do
    # Count line numbers
    lno=`expr $lno + 1`
    [ -z "$line" ] && continue

    set X $line; shift

    if [ x"$1" = x"ignore:" ]; then
        shift
        ignore_list="$ignore_list $@"
        continue
    elif [ x"$1" != x"test:" ]; then
        echo "$me:$schedule:$lno: syntax error"
        (exit 2); exit
    fi

    shift

    # ----------
    # Start tests
    # ----------

    if [ $# -eq 1 ]; then
        # Run a single test
        formatted=`echo $1 | awk '{printf "%-20.20s", $1;}'`
        $ECHO_N "test $formatted ... $ECHO_C"
        ( $PSQL -d "$dbname" <"$inputdir/sql/$1.sql" >"$outputdir/results/$1.out" 2>&1 )&
        [ -e "$outputdir/results/$1.out" ] || touch "$outputdir/expected/$1.out"
        wait
    else
        # Start a parallel group
        $ECHO_N "parallel group ($# tests): $ECHO_C"
        if [ $maxconnections -gt 0 ] ; then
            connnum=0
            test $# -gt $maxconnections && $ECHO_N "(in groups of $maxconnections) $ECHO_C"
        fi
        for name do
            ( 
              $PSQL -d "$dbname" <"$inputdir/sql/$name.sql" >"$outputdir/results/$name.out" 2>&1
              [ -e "$outputdir/results/$1.out" ] || touch "$outputdir/expected/$name.out"
              $ECHO_N " $name$ECHO_C"
            ) &
            if [ $maxconnections -gt 0 ] ; then
                connnum=`expr \( $connnum + 1 \) % $maxconnections`
                test $connnum -eq 0 && wait
            fi
        done
        wait
        echo
    fi

    # ----------
    # Run diff
    # (We do not want to run the diffs immediately after each test,
    # because they would certainly get corrupted if run in parallel
    # subshells.)
    # ----------

    for name do
        if [ $# -ne 1 ]; then
            formatted=`echo "$name" | awk '{printf "%-20.20s", $1;}'`
            $ECHO_N "     $formatted ... $ECHO_C"
        fi

        # Check list extracted from resultmap to see if we should compare
        # to a system-specific expected file.
        # There shouldn't be multiple matches, but take the last if there are.

        EXPECTED="$inputdir/expected/${name}"
        for LINE in $SUBSTLIST
        do
            if [ `expr "$LINE" : "$name="` -ne 0 ]
            then
                SUBST=`echo "$LINE" | sed 's/^.*=//'`
                EXPECTED="$inputdir/expected/${SUBST}"
            fi
        done

        # If there are multiple equally valid result files, loop to get the right one.
        # If none match, diff against the closest one.

        bestfile=
        bestdiff=
        result=2
	
        # ----------
        # Create empty benchamark file if not existent.
        # ----------

	[ -e "$EXPECTED.out" ] || touch "$EXPECTED.out"
	
        for thisfile in $EXPECTED.out ${EXPECTED}_[0-9].out; do
            [ ! -r "$thisfile" ] && continue
            diff $DIFFFLAGS $thisfile $outputdir/results/${name}.out >/dev/null 2>&1
            result=$?
            case $result in
                0) break;;
                1) thisdiff=`diff $DIFFFLAGS $thisfile $outputdir/results/${name}.out | wc -l`
                   if [ -z "$bestdiff" ] || [ "$thisdiff" -lt "$bestdiff" ]; then
                       bestdiff=$thisdiff; bestfile=$thisfile
                   fi
                   continue;;
                2) break;;
            esac
        done

        # Now print the result.

        case $result in
            0)
                echo "ok";;
            1)
                ( diff $DIFFFLAGS -C3 $bestfile $outputdir/results/${name}.out
                  echo
                  echo "======================================================================"
                  echo ) >> "$diff_file"
                if echo " $ignore_list " | grep " $name " >/dev/null 2>&1 ; then
                    echo "failed (ignored)"
                else
                    echo "FAILED"
                fi
                ;;
            2)
                # disaster struck
                echo "trouble" 1>&2
                (exit 2); exit;;
        esac
    done
done | tee "$result_summary_file" 2>&1

[ $? -ne 0 ] && exit

# ----------
# Server shutdown
# ----------

if [ -n "$postmaster_pid" ]; then
    message "shutting down postmaster"
    "$bindir/pg_ctl" -s -D "$PGDATA" stop
    wait "$postmaster_pid"
    unset postmaster_pid
fi

rm -f "$TMPFILE"


# ----------
# Evaluation
# ----------

count_total=`cat "$result_summary_file" | grep '\.\.\.' | wc -l | sed 's/ //g'`
count_ok=`cat "$result_summary_file" | grep '\.\.\. ok' | wc -l | sed 's/ //g'`
count_failed=`cat "$result_summary_file" | grep '\.\.\. FAILED' | wc -l | sed 's/ //g'`
count_ignored=`cat "$result_summary_file" | grep '\.\.\. failed (ignored)' | wc -l | sed 's/ //g'`

echo
if [ $count_total -eq $count_ok ]; then
    msg="All $count_total tests passed."
    result=0
elif [ $count_failed -eq 0 ]; then
    msg="$count_ok of $count_total tests passed, $count_ignored failed test(s) ignored."
    result=0
elif [ $count_ignored -eq 0 ]; then
    msg="$count_failed of $count_total tests failed."
    result=1
else
    msg="`expr $count_failed + $count_ignored` of $count_total tests failed, $count_ignored of these failures ignored."
    result=1
fi

dashes=`echo " $msg " | sed 's/./=/g'`
echo "$dashes"
echo " $msg "
echo "$dashes"
echo

if [ -s "$diff_file" ]; then
    echo "The differences that caused some tests to fail can be viewed in the"
    echo "file \`$diff_file'.  A copy of the test summary that you see"
    echo "above is saved in the file \`$result_summary_file'."
    echo
else
    rm -f "$diff_file" "$result_summary_file"
fi


(exit $result); exit
